"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSearchResults = useSearchResults;
var _utils = require("instantsearch.js/cjs/lib/utils");
var _react = require("react");
var _getIndexSearchResults = require("./getIndexSearchResults");
var _useIndexContext = require("./useIndexContext");
var _useInstantSearchContext = require("./useInstantSearchContext");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function useSearchResults() {
  var search = (0, _useInstantSearchContext.useInstantSearchContext)();
  var searchIndex = (0, _useIndexContext.useIndexContext)();
  var _useState = (0, _react.useState)(function () {
      var indexSearchResults = (0, _getIndexSearchResults.getIndexSearchResults)(searchIndex);
      // We do this not to leak `recommendResults` in the API.
      return {
        results: indexSearchResults.results,
        scopedResults: indexSearchResults.scopedResults
      };
    }),
    _useState2 = _slicedToArray(_useState, 2),
    searchResults = _useState2[0],
    setSearchResults = _useState2[1];
  (0, _react.useEffect)(function () {
    function handleRender() {
      var results = searchIndex.getResults();

      // Results can be `null` when the first search is stalled.
      // In this case, we skip the update.
      // See: https://github.com/algolia/instantsearch/blob/20996c7a159988c58e00ff24d2d2dc98af8b980f/src/widgets/index/index.ts#L652-L657
      if (results !== null) {
        setSearchResults({
          results: results,
          scopedResults: searchIndex.getScopedResults()
        });
      } else if (search.mainIndex.getIndexName().length === 0) {
        // If the main index has no name, we get the scoped results from
        // the first child index instead.
        var childIndex = search.mainIndex.getWidgets().find(_utils.isIndexWidget);
        childIndex && setSearchResults({
          results: (0, _getIndexSearchResults.getIndexSearchResults)(searchIndex).results,
          scopedResults: childIndex.getScopedResults()
        });
      }
    }
    search.addListener('render', handleRender);
    return function () {
      search.removeListener('render', handleRender);
    };
  }, [search, searchIndex]);
  return searchResults;
}